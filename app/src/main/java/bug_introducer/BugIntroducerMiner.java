/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bug_introducer;

import bug_introducer.model.VulnerabilityResult;
import bug_introducer.model.yaml.Vulnerability;
import bug_introducer.util.Parser;
import bug_introducer.util.SzzCommandRunner;
import bug_introducer.util.Util;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import picocli.CommandLine;

import java.io.File;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;

@CommandLine.Command(name = "bug_introducer", mixinStandardHelpOptions = true, version = "Bug Introducer 1.0",
                     description = "Finds bug introducing commits based on databases structured like project-kb")
public class BugIntroducerMiner implements Callable<Integer> {

    Logger logger = LogManager.getLogger(BugIntroducerMiner.class);

    @CommandLine.Parameters(index="0", description = "Path to the project-kb root")
    Path rootDir;

    @CommandLine.Parameters(index = "1", description = "Path to the szz script")
    Path szzScript;

    @Override
    public Integer call() throws Exception {
        String issueListPath = "issue_list.json";

        try{
            List<Path> yamlFiles = Util.listYamlFiles(rootDir);
            SzzCommandRunner szzRunner = new SzzCommandRunner(new File(Util.TMP_DIR), new File(szzScript.toAbsolutePath().toString()));
            for(Path yamlFile : yamlFiles){

                try {
                    Util.resetTmp();
                    Vulnerability vulnerability = Miner.processYaml(yamlFile, issueListPath);
                    if (vulnerability == null) continue;

                    String repository = vulnerability.getFixes().get(0).getCommits().get(0).getRepository();
                    szzRunner.cloneRepo(repository);
                    String resultJsonPath = szzRunner.runSZZ(issueListPath);
                    List<List<String>> results = Parser.parseResultJson(resultJsonPath);
                    Map<String, Set<String>> introducers = Miner.getIntroducingHashes(results);
                    VulnerabilityResult vulnResult = new VulnerabilityResult(repository, introducers);
                    String yamlString = Util.getAsYaml(vulnResult, vulnerability.getVulnerability_id());
                    Util.appendToResults(yamlString);
                }
                catch (Exception e){
                    logger.warn("Exception occured, continuing...", e);
                    continue;
                }
            }
        }
        catch (Exception e){
            logger.error(e);
        }
        finally {
            Util.deleteTmp();
        }


        // iterate over project-kb !
        // for each yaml file get the commit id !
        // with github api get the corrected commit id, creation date !
        // based on these create the json file !
        // run the szz algorithm ?
        // get the results, remove dupes, create output file ?
        return 0;
    }

    public static void main(String[] args) {
        int exitCode = new CommandLine(new BugIntroducerMiner()).execute(args);
        System.exit(exitCode);
    }
}
